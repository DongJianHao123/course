{"pageProps":{"data":{"id":1401,"clientId":"385","clientName":null,"courseId":"113","typeId":"5","isSpecail":0,"title":"操作系统调试器","type":3,"coverUrl":"https://ssl.cdn.maodouketang.com/Fnf3j32_RaVDSIrsioQRPvaWlNGM","teacher":"","startAt":null,"location":"0","info":"操作系统调试器","buyersCount":null,"price":"0","tag":"hot","totalNum":null,"createdAt":null,"updatedAt":null,"roomId":"100385113","isDelete":1,"courseIndex":12,"oldPrice":"0","ishd":480,"status":null,"summary":"工具对于提升开发人员的效率是有非常大作用的。工具的开发人员，往往需要了解到比一般用户更加底层","showqr":null,"introduction":"<h3>多操作系统的支持</h3><p>对多操作系统的支持，最简单的实现就是针对不同的操作系统，设定不同的内核边界断点。这个可以通过在<code style=\"background-color: var(--color-neutral-muted);\">launch.json</code>中增加一个配置项来实现。在另一个调试器插件<code style=\"background-color: var(--color-neutral-muted);\">Cortex-Debug</code>中，有一个名为<code style=\"background-color: var(--color-neutral-muted);\">rtos</code>的配置字段，其实现方式可以作为参考。 引入该配置的另一个重要意义在于，后续对内核数据结构解析相关的功能，也可以通过这个配置项来决定如何解析内存数据。</p><h3><br></h3><h3>自动定位内核边界</h3><p>目前在内核边界处的断点是以源文件名和行号的形式来定位的。这也就意味着如果对应的文件发生了变化，将直接导致调试器不可用，也就是说这是另一个硬编码的问题。</p><p>解决这个问题有两种思路，一种是将内核边界断点的行号做成可配置的，用户可以在<code style=\"background-color: var(--color-neutral-muted);\">launch.json</code>中指定出入口断点所在的源码文件及行号。这样做的方式是简单快捷可以实现功能，但是对用户来说并不是很友好。</p><p>另一种思路是，可以通过解析被调试的ELF文件，依据其中的调试信息，以及反汇编代码，自动定位到内核的出入口。例如可以把与<code style=\"background-color: var(--color-neutral-muted);\">satp</code>有关的操作作为识别特征，用于辅助定位出入点地址。结合上述多操作系统支持部分提到的配置，可以根据用户设置的不同目标OS，使用不同的定位策略。</p><p>在最终的实现上，可以将第二种思路作为首选，同时提供第一种思路的相关配置用于备选。</p><h3><br></h3><h3>自动跳过内核边界断点</h3><p>目前由于需要在内核态和用户态切换的过程中，使用断点的形式来通知调试器地址空间发生变化，每次到达内核边界时都会导致IDE直接进入到暂停状态，比较影响用户体验。一个解决思路是在<code style=\"background-color: var(--color-neutral-muted);\">launch.json</code>中增加一个名为<code style=\"background-color: var(--color-neutral-muted);\">auto_skip_inout_point</code>的配置项，当其值为true时，如果发现当前暂停的位置是断点所在位置，那么Adapter可以把这个消息吞掉，并且通知GDB直接继续运行，这样VSCode本身就会认为没有发生过断点命中，调试体验会有较大提升。</p><h3><br></h3><h3>内存数据解析</h3><p>前面说了很多已经做的和可以做的，但大部分都是在外围兜兜转转，主要是一些交互、UI上的改进，和操作系统这个核心话题其实有点远了，这个内存数据解析其实才是最压轴的功能点。</p><p>目前有一个可供大家参考的调试器插件叫做<code style=\"background-color: var(--color-neutral-muted);\">Cortex-Debug</code>,一个用来调试ARM处理器的调试器插件，里面集成了对rtos操作系统的支持，可以将不同线程的调用栈、线程的名称等，都列出来，如下图所示：</p>","applyCount":null,"linkUrl":null,"gradeLevel":null,"courseClasss":null,"courseResult":[],"studentResult":[{"id":11707,"clientId":"385","courseId":"113","classId":"1","userId":null,"type":null,"name":"李明","avatalUrl":null,"phone":"13691584139","email":null,"gender":"男","age":null,"location":null,"company":null,"tag":"已订阅短信通知","status":"1","createdAt":null,"updatedAt":null,"verify":"1","uniCourseId":1401,"tencentUserId":null},{"id":11945,"clientId":"385","courseId":"113","classId":"1","userId":null,"type":null,"name":"陈彦辉","avatalUrl":null,"phone":"13219053486","email":null,"gender":"男","age":"硕士研究生","location":null,"company":null,"tag":"已订阅短信通知","status":"1","createdAt":null,"updatedAt":null,"verify":"1","uniCourseId":1401,"tencentUserId":null},{"id":11961,"clientId":"385","courseId":"113","classId":"1","userId":null,"type":null,"name":"刘逸珑","avatalUrl":null,"phone":"18922251299","email":null,"gender":"男","age":"大三","location":null,"company":null,"tag":"已订阅短信通知","status":"1","createdAt":null,"updatedAt":null,"verify":"1","uniCourseId":1401,"tencentUserId":null},{"id":12402,"clientId":"385","courseId":"113","classId":"1","userId":null,"type":null,"name":"ap","avatalUrl":null,"phone":"18394119128","email":null,"gender":"男","age":"大二","location":null,"company":null,"tag":"已订阅短信通知","status":"1","createdAt":null,"updatedAt":null,"verify":"1","uniCourseId":1401,"tencentUserId":null}]},"client":{"id":348,"clientId":"385","clientName":"os2edu","type":0,"status":0,"name":"开源操作系统培训","password":"13691584139","telephone":"13691584139","email":"email@emali.com","createdAt":null,"updatedAt":"开源操作系统培训"},"config":{"id":297,"clientId":"385","coverUrl":"https://ssl.cdn.maodouketang.com/FjgLOJxk9iLPzy7cg215rhvzLHiq","title":null,"logoUrl":null,"aboutUsInfo":"操作系统是计算机系统中负责管理各种软硬件资源的核心系统软件，为应用软件运行提供良好的环境。掌握操作系统的基本原理及其核心技术是研究型大学计算机专业本科毕业生的基本要求。\n\n本课程是计算机专业核心课，以主流操作系统为实例，以教学操作系统ucore为实验环境，讲授操作系统的概念、基本原理和实现技术，为学生从事操作系统软件研究和开发，以及充分利用操作系统功能进行应用软件研究和开发打下扎实的基础。","aboutUsImgUrl":"https://ssl.cdn.maodouketang.com/FnDocVSzq_KL5kzpWs1ltDgpyvhb","status":null,"companyName":null,"companyQrUrl":null,"companyPhone":null,"companyEmail":null,"icpInfo":"促进操作系统的教学、研究与产业的发展","consultUrl":"https://ssl.cdn.maodouketang.com/Fpkgonzaw5GTUFa0Bfvd_ZlO5yq1","createdAt":null,"updatedAt":null}},"__N_SSG":true}