{"pageProps":{"data":{"id":1016,"clientId":"385","clientName":null,"courseId":"129","typeId":"5","isSpecail":0,"title":"proj5-fuxi-full-system-with-cpu-compiler-os","type":3,"coverUrl":"https://ssl.cdn.maodouketang.com/FlbDYgYRsrGkiR4L6mZQxxLXgX39","teacher":"","startAt":null,"location":"0","info":"proj5-fuxi-full-system-with-cpu-compiler-os","buyersCount":null,"price":"0","tag":"notHot","totalNum":null,"createdAt":null,"updatedAt":null,"roomId":"100385129","isDelete":1,"courseIndex":15,"oldPrice":"0","ishd":480,"status":null,"summary":"实现CPU+Lang+Compiler+OS","showqr":null,"introduction":"<h3>项目描述</h3><p>作为计算机系的学生，掌握 CPU、Compiler、OS 是一种必须的专业技能；但同时，作为一个本科生，很难将这三者有机整合，融会贯通。伏羲致力于从零开始，构建一个以 RISC-V 处理器为核心的软硬件全系统，包括 CPU、SoC、Compiler 和 OS，借此锻炼本科生的系统能力，并且在相关方向上做出更多的探索和创新。</p><p>学习和扩展伏羲系统，可以帮助有一定能力的同学吃透 CPU、Compiler、OS，自底向上建立计算机体系结构、组成原理、编译原理和操作系统等课程之间的内在联系，学习和理解大型软硬件工程的设计、实现和测试方法，锻炼工程能力和系统能力，在计算机系统的道路上更上层楼。</p><p>得益于 RISC-V 指令集架构灵活的扩展性，同学们还可根据实际需要，在系统中实现针对诸如高性能计算、异构计算、可信计算等方向的扩展。由于整个伏羲系统均为自行构建，我们可以针对这套体系，快速实现一个包含指令集扩展、编程语言语法/标准库支持、编译后端特殊优化、操作系统提供接口的完整的软硬件解决方案。</p><p><br></p><h3><br></h3><h3>已有源代码</h3><ul><li><a href=\"https://github.com/MaxXSoft/Fuxi\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: var(--color-accent-fg);\">CPU: Fuxi (伏羲), 32-bit pipelined RISC-V processor written in Chisel3</a></li><li><a href=\"https://github.com/MaxXSoft/YuLang\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: var(--color-accent-fg);\">Compiler: Yu (羽), a simple system programming language</a></li><li><a href=\"https://github.com/MaxXSoft/GeeOS\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: var(--color-accent-fg);\">OS: GeeOS (寂), a lightweight, UNIX like operating system written in YuLang</a></li></ul><h3><br></h3><h3>所属赛道</h3><p>2021 全国大学生操作系统比赛的 “OS功能设计” 赛道</p><p><br></p><h3><br></h3><h3>参赛要求</h3><ul><li>以小组为单位参赛，最多三人一个小组，且小组成员是来自同一所高校的本科生（2021 年春季学期或之后本科毕业的大一 ~ 大四的学生）</li><li>如学生参加了多个项目，参赛学生选择一个自己参加的项目参与评奖</li><li>请遵循 “2021 全国大学生操作系统比赛” 的章程和技术方案要求</li></ul><h3><br></h3><h3>项目导师</h3><p>邢其正 (MaxXing)</p><p><br></p><ul><li>github&nbsp;<a href=\"https://github.com/MaxXSoft\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: var(--color-accent-fg);\">https://github.com/MaxXSoft</a></li><li>email&nbsp;<a href=\"mailto:x@MaxXSoft.net\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: var(--color-accent-fg);\">x@MaxXSoft.net</a></li><li>web&nbsp;<a href=\"http://maxxsoft.net/\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: var(--color-accent-fg);\">http://MaxXSoft.net/</a></li></ul><h3><br></h3><h3>难度</h3><p>初等 ~ 中等 ~ 高等</p><p><br></p><h3><br></h3><h3>特征</h3><ul><li>自己设计 CPU (伏羲 CPU)</li><li>设计一种编程语言 (羽语言)，并实现这种编程语言的编译器，可以把编译出的代码运行在自己设计的 CPU 上</li><li>用自己设计的编程语言编写 OS (寂 OS)，通过自己写的编译器生成机器码，并最终运行在自己设计的 CPU 上</li></ul><h3><br></h3><h3>License</h3><ul><li>GPLv3</li></ul><h2><br></h2><h2>预期目标</h2><h3><br></h3><h3>注意：下面的内容是建议内容，不要求必须全部完成。选择本项目的同学也可与导师联系，提出自己的新想法，如导师认可，可加入预期目标</h3><h3><br></h3><h3>第一题: 大自然的搬运工</h3><ul><li>挑选合适的 FPGA 开发板, 将伏羲 SoC 移植到其上.</li><li>在第一步的基础上, 为伏羲 SoC 移植各类系统软件, 如&nbsp;<code style=\"background-color: var(--color-neutral-muted);\">u-boot</code>,&nbsp;<code style=\"background-color: var(--color-neutral-muted);\">open-sbi</code>,&nbsp;<code style=\"background-color: var(--color-neutral-muted);\">xv6</code>,&nbsp;<code style=\"background-color: var(--color-neutral-muted);\">rCore</code>&nbsp;等.</li><li>在进行第二步时, 您可能需要微调伏羲 CPU 的实现.</li></ul><h3><br></h3><h3>第二题: 扩展寂 OS</h3><p>使用羽语言, 为寂 OS 实现更多的功能, 例如:</p><p><br></p><ul><li>支持基于优先级的线程调度.</li><li>支持基于伙伴分配器的内存管理.</li><li>支持&nbsp;<code style=\"background-color: var(--color-neutral-muted);\">mmap</code>,&nbsp;<code style=\"background-color: var(--color-neutral-muted);\">fork</code>,&nbsp;<code style=\"background-color: var(--color-neutral-muted);\">execve</code>&nbsp;等系统调用.</li><li>支持更丰富的文件系统.</li><li>支持 GUI.</li></ul><h3><br></h3><h3>第三题: Make YuLang Great Again!</h3><p>以下三点为平行关系, 您只需完成其中的一点 (或几点):</p><p><br></p><ul><li>为羽语言添加更多的功能, 例如:</li><li class=\"ql-indent-1\">支持 RAII, 即: 编译器负责在某个 “对象” (<code style=\"background-color: var(--color-neutral-muted);\">struct</code>&nbsp;的一个实例) 的生命周期结束后, 自动调用其&nbsp;<code style=\"background-color: var(--color-neutral-muted);\">del</code>&nbsp;方法.</li><li class=\"ql-indent-1\">支持基于模式匹配和 AST 生成的宏.</li><li class=\"ql-indent-1\">支持泛型.</li><li class=\"ql-indent-1\">支持生成调试信息.</li><li>使用 Rust 或其他语言, 重新实现羽语言的编译器.</li><li>使用羽语言, 实现羽语言的编译器.</li></ul><h3><br></h3><h3>第四题: 伏羲的 RVC 支持</h3><ul><li>修改伏羲 CPU 的硬件实现, 使其支持 RISC-V 的 RVC (压缩指令) 扩展.</li><li>修改寂 OS 的相关部分, 使其支持这一变更, 并能正常运行于修改后的伏羲 CPU 上.</li></ul><h3><br></h3><h3>第五题: 伏羲的自定义扩展</h3><ul><li>为伏羲添加一个硬件加速器, 例如针对矩阵运算, 编解码, 神经网络推理的硬件实现.</li><li>如果您对指令集做出了扩展, 您需要修改羽语言编译器的后端 (目前是 LLVM), 使其支持在必要的情况下, 生成相关的指令.</li><li>修改寂 OS, 使其适配相关更改.</li><li>设计一个可运行于伏羲 SoC/寂 OS, 并利用该自定义扩展的应用, 以展示您所做的更改.</li><li><br></li></ul>","applyCount":null,"linkUrl":null,"gradeLevel":null,"courseClasss":null,"courseResult":[],"studentResult":[]},"client":{"id":348,"clientId":"385","clientName":"os2edu","type":0,"status":0,"name":"开源操作系统培训","password":"13691584139","telephone":"13691584139","email":"email@emali.com","createdAt":null,"updatedAt":"开源操作系统培训"},"config":{"id":297,"clientId":"385","coverUrl":"https://ssl.cdn.maodouketang.com/FjgLOJxk9iLPzy7cg215rhvzLHiq","title":null,"logoUrl":null,"aboutUsInfo":"操作系统是计算机系统中负责管理各种软硬件资源的核心系统软件，为应用软件运行提供良好的环境。掌握操作系统的基本原理及其核心技术是研究型大学计算机专业本科毕业生的基本要求。\n\n本课程是计算机专业核心课，以主流操作系统为实例，以教学操作系统ucore为实验环境，讲授操作系统的概念、基本原理和实现技术，为学生从事操作系统软件研究和开发，以及充分利用操作系统功能进行应用软件研究和开发打下扎实的基础。","aboutUsImgUrl":"https://ssl.cdn.maodouketang.com/FnDocVSzq_KL5kzpWs1ltDgpyvhb","status":null,"companyName":null,"companyQrUrl":null,"companyPhone":null,"companyEmail":null,"icpInfo":"促进操作系统的教学、研究与产业的发展","consultUrl":"https://ssl.cdn.maodouketang.com/Fpkgonzaw5GTUFa0Bfvd_ZlO5yq1","createdAt":null,"updatedAt":null}},"__N_SSG":true}